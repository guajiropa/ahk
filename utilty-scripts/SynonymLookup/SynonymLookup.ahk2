/*
This modification of the original SynonymLookup.ahk script no longer merely opens the Web 
page targeted with the selected word but rather downloads the source code text directly 
from the site. Since AutoHotkey does not need to render the Web page, it's fast while 
capturing the code in a variable.

Next, using the RegExMatch() function to extract synonyms from the code, the script inserts 
each word into a pop-up menu. After selecting a word from the menu, the script replaces the
original selected word in the editing field.

You will find a number of useful AutoHotkey tricks described in the script below. These 
techniques may apply equally as well to other applications where you want to extract data from
a Web page. The script requires an Internet connection to work.

After selecting a word in your document, the Hotkey combination CTRL+ALT+L downloads the source 
code from the Web site Thesaurus.com to parse synonyms for the selected word.

Find more free AutoHotkey scripts and apps at:
http://www.computoredge.com/AutoHotkey/Free_AutoHotkey_Scripts_and_Apps_for_Learning_and_Generating_Ideas.html

This AuoHotkey version 2.0 script uses the Hotkey combination Ctrl+Alt+Y to return a menu of
synonyms. It only runs under V2.0 of AutoHotkey.

AutoHotkey Version: 2.x

This AutoHotkey script uses version 2.0 functions and won't run under version 1.1.
The .ahk2 file extension denotes all V2.0 scripts and can be compared to the sister 1.1
scripts with the .ahk extension.

For more information about how to run both V1.1 and V2.0 simultaneously, see:
https://jacksautohotkeyblog.wordpress.com/2018/01/11/how-to-fool-around-with-the-new-autohotkey-version-2-0/

*/

SetWorkingDir A_ScriptDir  ; Ensures a consistent starting directory.

^!y::

/*
The script begins with the standard Clipboard routine where the user first selects
a word in any text or editing field.
*/
                                                      
  OldClipboard := ClipboardAll
  Clipboard:= ""
  Send "^c" ;copies selected text
  ClipWait 0
  If ErrorLevel
    {
      MsgBox "No Text Selected!"
      Return
    }

KeyWord := StrUpper(Clipboard)

SynonymList := KeyWord
	
	; The GetWebPage() function loads source code from the target Web into the variable SynPage.

	SynPage := GetWebPage("http://www.thesaurus.com/browse/" . Clipboard)
  Sleep 500
 

  
; The variable NewSynPos tracks the location of each synonym as AutoHotkey looks through the Web page.
; This allows the Loop to jump to the next synonym.


  
; The next four lines assign the menu items as a title highlighting the selected work in all caps, 
; with a bullet, and as a non-functioning default

   SynonymMenu := MenuCreate()

   SynonymMenu.Add(KeyWord, "LoadPage", "+Radio")
   SynonymMenu.Check(KeyWord)
   SynonymMenu.Default := KeyWord
;   Menu, Synonym, add, %KeyWord%, LoadPage, +Radio
;   Menu, Synonym, check, %KeyWord%
;   Menu, Synonym, default, %KeyWord%

 ; The beginning of the loop which increments through the Web page variable while extracting synonyms.

 ;RestartLoop: 
  NewSynPos := 1 
  
; The variable ItemCount increments as each synonym is added to the menu for starting new columns.
; This prevents the list from becoming too long.

  ItemCount := 1

  Loop
  {
     
; The RegExMatch function  extracts each synonym based upon unique surrounding HTML code.

  SynPos := RegExMatch(SynPage,"targetTerm.:.(.*?).,.targetSlug",Synonym,NewSynPos)
;  SynPos := RegExMatch(SynPage,'<span class="text">(.*?)(</span>)(.*?)<span class=',Synonym,NewSynPos)
;  MsgBox SynPage clipboard
; When AutoHotkey no longer finds a synonym, the script exits the Loop.
  If SynPage ~= "no thesaurus results"
  {
     SynonymMenu.Add("No thesaurus results!", "LoadPage")
	 Break
  }
  If SynPos = 0
     Break

; By incrementing the position in the RegExMatch() function, AutoHotkey jumps to the next synonym.

  NewSynPos := SynPos+1
  
; Synonym[1] represents the first subpattern (the synonym). AutoHotkey checks the SynonymList variable for redundancy.
; If found, the Loop skips to the next iteration. (No need to add it again, thus keeping the columns even.)
	 
    If InStr(SynonymList,Synonym[1])
       Continue
	   
; When the number of menu items reaches 20, the script starts a new menu column and resets the counter.
; In both cases, the script adds new menu item.
	 
	If ItemCount = 20
	{
      SynonymMenu.Add(Synonym[1], "SynonymAction", "+BarBreak")
	  ItemCount := 1
	}  
	Else
	{
;  MsgBox "Add item?" . Synonym[0] . " | " . Synonym[1]
       SynonymMenu.Add(Synonym[1], "SynonymAction")

	  ItemCount++
	}
	
; To prevent AutoHotkey from processing redundant words in the menu, the script adds each new synonym to a list of included words.

   SynonymList := SynonymList . "," . Synonym[1]
  }


; Display the menu.

;  If (InLoop = 0)
;    GoTo RestartLoop

  SynonymMenu.Show()
  
; After selection or cancelation, the script deletes the menu.

  SynonymMenu.Delete()
;  SynPos := 0
  
; Restore the old Clipboard contents.

  Clipboard := OldClipboard

Return

; Subroutine inserts the new synonym in place of the selected word.

SynonymAction(MenuItem)
{
;   Global
   SendInput MenuItem
}

; Subroutine loads the Web page into the default browser.

LoadPage()
{
;  Global
  Run "http://www.thesaurus.com/browse/" . Clipboard
}


; The GetWebPage() function downloads the code from a Web page and returns the source code.

GetWebPage(WebPage)
{
   whr := ComObjCreate("WinHttp.WinHttpRequest.5.1")   
   whr.Open("GET", WebPage, true)
   whr.Send()
   ; Using 'true' above and the call below allows the script to remain responsive.
   whr.WaitForResponse()
   RefSource := whr.ResponseText
   Return RefSource
}